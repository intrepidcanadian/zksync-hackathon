require('dotenv').config();
const knex = require("knex")(require("../knexfile"));

const SERVER_PRIVATE_KEY = process.env.SERVER_PRIVATE_KEY;
const Web3 = require('web3').default;
const web3 = new Web3();  // Ensure you have an Ethereum provider configured

async function checkEmailInDatabase(email) {
  try {
    const existingEmail = await knex("emails")
      .where({ email })
      .first();
    return existingEmail !== undefined;
  } catch (error) {
    console.error('Error checking email in database:', error);
    return false;
  }
}

const signEmails = async (req, res) => {
  try {
    const email = req.body.email;
    const isEmailValid = await checkEmailInDatabase(email);

    if (isEmailValid) {
      const emailHash = web3.utils.keccak256(email); 

      // Sign the emailHash with the SERVER_PRIVATE_KEY
      const serverSignature = web3.eth.accounts.sign(emailHash, SERVER_PRIVATE_KEY);

      // Recover the public key from the signature
      const recoveredPubKey = web3.eth.accounts.recover(
        emailHash,
        serverSignature.signature
      );

      // Derive the Ethereum address from the recovered public key
      const serverAddress = web3.utils.toChecksumAddress(recoveredPubKey);

      res.json({ serverSignature: serverSignature.signature, emailHash: emailHash, serverAddress: serverAddress });
    } else {
      res.status(400).send("Invalid email");
    }
  } catch (error) {
    console.error('Error:', error);
    res.status(500).send("An error occurred");
  }
};

module.exports = {
  signEmails
};


